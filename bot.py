import os
import logging
import sys
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from dotenv import load_dotenv

load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SURNAME, NAME, PATRONYMIC, PASSPORT, SUBJECT, SESSION_TIME, PRIVACY = range(7)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –í–∞—à —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = "8007672980:AAGPSk8oTcjHt5tplFuyd90qkGRTrMAC1Hc"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ—Å—Å–∏—é.\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"
    )
    return SURNAME

async def surname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['surname'] = update.message.text
    await update.message.reply_text("‚úÖ –§–∞–º–∏–ª–∏—è –ø—Ä–∏–Ω—è—Ç–∞!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("‚úÖ –ò–º—è –ø—Ä–∏–Ω—è—Ç–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    return PATRONYMIC

async def patronymic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['patronymic'] = update.message.text
    await update.message.reply_text("‚úÖ –û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    return PASSPORT

async def passport(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['passport'] = update.message.text
    await update.message.reply_text("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã!\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏:")
    return SUBJECT

async def subject(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['subject'] = update.message.text
    await update.message.reply_text(
        "‚úÖ –ü—Ä–µ–¥–º–µ—Ç –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: 25.12.2024 14:30"
    )
    return SESSION_TIME

async def session_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['session_time'] = update.message.text
    
    keyboard = [['‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', '‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìã –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n"
        "‚Ä¢ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É—á–µ–±—ã\n"
        "‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n\n"
        "–°–æ–≥–ª–∞—Å–Ω—ã —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?",
        reply_markup=reply_markup
    )
    return PRIVACY

async def privacy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω':
        user_data = context.user_data
        
        response_text = f"""
üéâ –ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!

üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
‚îú –§–∞–º–∏–ª–∏—è: {user_data['surname']}
‚îú –ò–º—è: {user_data['name']}
‚îú –û—Ç—á–µ—Å—Ç–≤–æ: {user_data['patronymic']}
‚îú –ü–∞—Å–ø–æ—Ä—Ç: {user_data['passport']}
‚îú –ü—Ä–µ–¥–º–µ—Ç: {user_data['subject']}
‚îî –í—Ä–µ–º—è: {user_data['session_time']}

‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!
–°–ø–∞—Å–∏–±–æ! üìö
        """
        
        await update.message.reply_text(response_text, reply_markup=ReplyKeyboardRemove())
        logger.info(f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {user_data}")
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, surname)],
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
                PATRONYMIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, patronymic)],
                PASSPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, passport)],
                SUBJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, subject)],
                SESSION_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, session_time)],
                PRIVACY: [MessageHandler(filters.TEXT & ~filters.COMMAND, privacy)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        application.add_handler(conv_handler)
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
